%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Sat Aug 27 08:33:33 2016
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
CUCUUAUCAAGAGAGGUGGAGGGACUGGCCCGAUGAAACCCGGCAACCAGCCUUAGGGCAUGGUGCCAAUUCCUGCAGCGGUUUCGCUGAAAGAUGAGAGA\
) def
/coor [
[96.77200317 238.77343750]
[96.31008148 223.78054810]
[95.84815216 208.78765869]
[95.38623047 193.79476929]
[94.92430115 178.80189514]
[94.46237183 163.80900574]
[94.00045013 148.81611633]
[93.53852081 133.82322693]
[86.71735382 131.77000427]
[80.46460724 128.35719299]
[75.04786682 123.73084259]
[70.69894409 118.08894348]
[67.60395050 111.67294312]
[65.89532471 104.75740051]
[65.64619446 97.63826752]
[66.86721802 90.62020111]
[69.50614929 84.00354004]
[73.45004272 78.07144165]
[78.53013611 73.07776642]
[84.52902222 69.23621368]
[80.87031555 54.68926239]
[77.21160889 40.14230728]
[73.55290222 25.59535217]
[69.89419556 11.04839897]
[59.02453613 -0.44773254]
[63.42378998 -14.67783546]
[59.76508331 -29.22478867]
[56.10637665 -43.77174377]
[52.44766998 -58.31869888]
[48.56538391 -72.80758667]
[44.46044159 -87.23497009]
[39.01241684 -94.78796387]
[40.45858765 -102.17009735]
[36.79988098 -116.71704865]
[33.14117432 -131.26400757]
[29.24538803 -135.25057983]
[27.56417465 -139.88769531]
[27.95578003 -144.17291260]
[29.88267326 -147.32223511]
[27.58179855 -162.14471436]
[25.28092384 -176.96720886]
[22.29795074 -191.66760254]
[18.63924408 -206.21455383]
[14.98053837 -220.76152039]
[2.00545788 -230.19691467]
[1.43649673 -246.22987366]
[13.71011353 -256.56127930]
[29.41103935 -253.26576233]
[36.49486923 -238.87135315]
[29.52749252 -224.42022705]
[33.18619919 -209.87326050]
[36.84490585 -195.32630920]
[39.84695053 -193.17715454]
[41.87790298 -189.38351440]
[42.13714600 -184.45785522]
[40.10340500 -179.26808167]
[42.40428162 -164.44560242]
[44.70515442 -149.62310791]
[47.68812943 -134.92271423]
[51.34683228 -120.37575531]
[55.00553894 -105.82880402]
[58.88782501 -91.33991241]
[62.99277115 -76.91252899]
[67.93625641 -71.24250031]
[66.99462891 -61.97740173]
[70.65332794 -47.43045044]
[74.31203461 -32.88349533]
[77.97074127 -18.33654213]
[88.57871246 -7.88090563]
[84.44114685 7.38969278]
[88.09985352 21.93664742]
[91.75856018 36.48360062]
[95.41726685 51.03055573]
[99.07597351 65.57750702]
[125.80191803 77.19599152]
[134.04803467 105.14714050]
[148.03511047 110.56576538]
[162.02220154 115.98439026]
[176.00927734 121.40301514]
[189.99636841 126.82164001]
[206.10961914 123.77284241]
[216.60003662 136.37773132]
[210.67597961 151.66947937]
[194.43161011 153.91725159]
[184.57774353 140.80873108]
[170.59065247 135.39010620]
[156.60357666 129.97148132]
[142.61648560 124.55284882]
[128.62940979 119.13422394]
[124.67367554 124.02023315]
[119.89557648 128.10565186]
[114.45437622 131.25431824]
[108.53141022 133.36131287]
[108.99333191 148.35418701]
[109.45526123 163.34707642]
[109.91719055 178.33996582]
[110.37911224 193.33285522]
[110.84104156 208.32572937]
[111.30296326 223.31861877]
[111.76489258 238.31150818]
[114.54772949 257.49237061]
] def
/pairs [
[1 100]
[2 99]
[3 98]
[4 97]
[5 96]
[6 95]
[7 94]
[8 93]
[20 74]
[21 73]
[22 72]
[23 71]
[24 70]
[26 68]
[27 67]
[28 66]
[29 65]
[30 63]
[31 62]
[33 61]
[34 60]
[35 59]
[39 58]
[40 57]
[41 56]
[42 52]
[43 51]
[44 50]
[76 89]
[77 88]
[78 87]
[79 86]
[80 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
