%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Sun Apr 10 18:47:07 2016
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GGACAUAUAAUCGCGUGGAUAUGGCACGCAAGUUUCUACCGGGCACCGUAAAUGUCCGACUAUGUCC\
) def
/coor [
[92.50000000 238.64527893]
[92.50000000 223.64527893]
[92.50000000 208.64527893]
[92.50000000 193.64527893]
[92.50000000 178.64527893]
[92.50000000 163.64527893]
[92.50000000 148.64527893]
[79.68846130 144.83363342]
[68.37486267 137.71557617]
[59.39357758 127.81604767]
[53.40695572 115.86511993]
[50.85650253 102.74417114]
[51.93030930 89.42083740]
[37.94322586 84.00221252]
[23.95614243 78.58358765]
[9.96905899 73.16496277]
[-4.01802492 67.74633789]
[-17.63010216 75.44343567]
[-32.99564362 72.53927612]
[-42.85950851 60.40509796]
[-42.56428146 44.77030182]
[-32.24936295 33.01715851]
[-16.78513908 30.69513702]
[-3.47334290 38.90063095]
[1.40060019 53.75925446]
[15.38768387 59.17787933]
[29.37476730 64.59650421]
[43.36185074 70.01512909]
[57.34893417 75.43375397]
[63.32110214 67.17817688]
[70.86515045 60.32917786]
[79.65776825 55.18027878]
[89.32215881 51.95213318]
[99.44415283 50.78308487]
[109.58996582 51.72323227]
[119.32479858 54.73228455]
[128.23146057 59.68129349]
[135.92826843 66.35816193]
[142.08535767 74.47676086]
[146.43888855 83.68915558]
[161.18348694 80.93291473]
[175.92808533 78.17666626]
[190.67266846 75.42042542]
[205.41726685 72.66418457]
[220.16186523 69.90794373]
[227.68309021 56.19789886]
[242.27598572 50.57815552]
[257.05023193 55.70217896]
[265.02987671 69.15056610]
[262.44720459 84.57340240]
[250.52163696 94.68848419]
[234.88407898 94.71979523]
[222.91810608 84.65253448]
[208.17350769 87.40878296]
[193.42892456 90.16502380]
[178.68432617 92.92126465]
[163.93972778 95.67750549]
[149.19512939 98.43375397]
[144.29025269 121.47061157]
[129.24334717 139.59091187]
[107.50000000 148.64527893]
[107.50000000 163.64527893]
[107.50000000 178.64527893]
[107.50000000 193.64527893]
[107.50000000 208.64527893]
[107.50000000 223.64527893]
[107.50000000 238.64527893]
] def
/pairs [
[1 67]
[2 66]
[3 65]
[4 64]
[5 63]
[6 62]
[7 61]
[13 29]
[14 28]
[15 27]
[16 26]
[17 25]
[40 58]
[41 57]
[42 56]
[43 55]
[44 54]
[45 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
